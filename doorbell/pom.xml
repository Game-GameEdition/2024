<?xml version="1.0" encoding="UTF-8"?>

<!--
    This file describes to Maven how to go about building our Java project.  It includes references to JARs to download from
    the web and that we should be building a target JAR with everything smushed into one single JARfile.

    Ultimate the Java part of the project is a simple microservice.  There will eventually be a static file server as well for
    the HTML UI.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- The name of the project and related metadata -->
  <groupId>org.riverbots.door</groupId>
  <artifactId>doorbell</artifactId>
  <version>1.0</version>
  <name>doorbell</name>
  <url>https://riverbots.org</url>

  <!--
    Set the source type and what version of the Java API to use.  1.8 = Java 8 (ugh.  Silly people mixing version and product
    numbers.
  -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <!-- Add jitpack.io for some of the project dependencies. -->
  <repositories>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
  </repositories>

  <!-- OK, so this project requires junit for testing, the jlayer MP3 library, and the Java HTTP Servlet stuff from Jetty. -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.umjammer</groupId>
      <artifactId>jlayer</artifactId>
      <version>1.0.2</version>
    </dependency>
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>6.0.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>11.0.18</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>11.0.18</version>
    </dependency>
  </dependencies>

  <!--
    Now for what an actual build needs.  For the most part, this is boilerplate from "mvn init", but I'll note some tweaks below.
  -->
  <build>
    <pluginManagement>
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
	<!-- The first major tweak is that we're using the assembly plugin to create the JAR. -->
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <appendAssemblyId>false</appendAssemblyId>
          <archive>
            <!-- This fixes it so that "java -jar doorbell-1.0.jar" does the right thing. -->
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>org.riverbots.door.App</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <!-- This fixes it so that all the extra stuff we need is pulled into the JAR (like the MP3 player lib). -->
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
	<!-- We only care about the "single" target, i.e. make one single JAR file. -->
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
